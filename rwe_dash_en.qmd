---
title: "Data-Exploration"
author: by Eylem Kanol | Arne Maaß | Johanna Knoesel
format:
  dashboard:
    theme:
      light: simplex
      dark: darkly
    nav-buttons:
          - icon: github
            href: https://github.com/arnemaass/rwe_dash 
lang: en
server: shiny
---



```{r}
#| context: setup

# rm(list = ls())

# locally
# setwd("C:/Users/user/OneDrive/Desktop/WZB/PMK/2024/quarto_dash")
# shared
# setwd("Z:/Shared/Shiny/2024/quarto_dash")


library(tidyverse)
library(quarto)
library(arrow) # PARQUET FOR FASTER LOADING
library(ggplot2)
library(viridis)
library(hrbrthemes)
library(sf)
library(plotly)
library(leaflet) # for faster map-plotting then plotly
library(htmltools)
library(rsconnect)
library(shiny)


pmk_zs <- read_parquet("data/PMK_shiny.parquet")
rwm<- readRDS("data/data_kreise.rds")
rwm1<- readRDS("data/rwm_shiny.rds")
rs <- read_parquet("data/klanfrright23.parquet")

####

rs$state <- as.factor(rs$state)
pmk_zs$variable <- recode(pmk_zs$variable,
                         "Straftaten-rechts" = "Offenses-right",
                          "Straftaten-links" = "Offenses-left",
                          "Straftaten-islamistisch" = "Offenses-islamist",
                          "Straftaten-ausländisch" = "Offenses-foreign",
                          "Gewalttaten-rechts" = "Violent acts-right",
                          "Gewalttaten-links" = "Violent acts-left",
                          "Gewalttaten-islamistisch" = "Violent acts-islamist",
                          "Gewalttaten-ausländisch" = "Violent acts-foreign",
                           .default = NA_character_)


```


<!-- ENGLISH VERSION --> 


# Start

```{r}

mainPanel(
  h2("Right-Wing Mobilization and Politically Motivated Crime in Germany 2000-2022", style = "text-align: center;"),
  h5("Eylem Kanol | Arne Maaß | Johanna Knoesel", style = "text-align: center;"),
  tags$br(),
  h5(HTML(
  "This dashboard visualizes three self-created data sets on right-wing extremism in Germany.<br>
  At the top, you can switch between the visualizations and filter the data according to your preferences. <br>  <br>
 Politically Motivated Crime shows the annual development of various ideologically motivated crimes based on reports from the German Domestic
Intelligence Service.<br>
   The second visualization is a monthly time series for right-wing extremist crimes by federal state. <br>
  Finally, the mobilization of demonstrations classified by the Domestic Intelligence Service as right-wing extremist is outlined. <br>  <br>  <br>"),
  style = "text-align: center;"),
  tags$br(),
tags$a(href = "https://www.wzb.eu",
       img(src = "www/wzb-wide-text.png", 
           style = "display: block; margin-left: auto; margin-right: auto; max-width: 100%; height: auto;"),
       style = "position: absolute; bottom: 10px; width: 90%; text-align: center;")
)

```

# Politically Motivated Crime

```{r}
mainPanel(
  h3("Politically Motivated Crime 2000-2021"),
  h5("The data was taken from the 2000 to 2021 Reports on the Protection of the Constitution.
  Data is not available for every category and every year, which is why the graphs may be
  be partially incomplete. Please also note the change in the Y-axis scaling."),
  plotlyOutput("plot_pmk"))
```

## {.sidebar}

```{r}

selectInput("bl", label = "You can select a federal state here:",
            choices = c("Germany"="Deutschland",
                        "Baden-Württemberg"="Baden-Württemberg",
                        "Bavaria"="Bayern",
                        "Berlin"="Berlin",
                        "Brandenburg"="Brandenburg",
                        "Bremen"="Bremen",
                        "Hamburg"="Hamburg",
                        "Hesse"="Hessen",
                        "Mecklenburg-Western Pomerania"="Mecklenburg-Vorpommern",
                        "Lower Saxony"="Niedersachsen",
                        "North Rhine-Westphalia"="Nordrhein-Westphalen",
                        "Rhineland-Palatinate"="Rheinland-Pfalz",
                        "Saarland"="Saarland",
                        "Saxony"="Sachsen", 
                        "Saxony-Anhalt"="Sachsen-Anhalt", 
                        "Schleswig-Holstein"="Schleswig-Holstein", 
                        "Thuringia"="Thüringen"),
            selected = "Germany")

sliderInput("time", "You can define the time frame here:",
            min = min(pmk_zs$jahr), max = max(pmk_zs$jahr),
            value = c(min(pmk_zs$jahr), max(pmk_zs$jahr)),
            sep = "")

checkboxGroupInput("art", label = "Political affiliation and type of offense:",
                  choices= levels(pmk_zs$variable),
                  selected = levels(pmk_zs$variable))


```


```{r}
#| context: server

output$plot_pmk <- renderPlotly({
  
    # Create ggplot object
    p <- ggplot(subset(pmk_zs, variable %in% input$art), 
                aes(x=jahr, y = get(input$bl), color=variable))+ 
      geom_path() +
      geom_point(aes(text=paste("Year: ", jahr, "<br>",
                                "Type: ", variable, "<br>",
                                "Count: ", get(input$bl)))) +
        xlim(input$time[1], input$time[2]) +
        scale_color_manual(
          values = c(
                "Offenses-right"="gray0",
                "Offenses-left"="firebrick",
                "Offenses-islamist"="forestgreen",
                "Offenses-foreig"="blue4",
                "Violent acts-right"="gold",
                "Violent acts-left"="plum1",
                "Violent acts-islamist"="#fffac8",
                "Violent acts-foreign"="cornflowerblue"
            )
        ) +
        xlab("Year") +
        ylab("Count of acts") +
        guides(color=guide_legend(title="Type of offense:")) +
        theme_ipsum_rc()

    # Convert ggplot object to plotly object
    ggplotly(p, tooltip = "text") %>% 
      layout(dragmode = "select")
    
})


```

# Right-Wing Crime 

```{r}
mainPanel(
  h3("Right-Wing Extremist Crime 2002-2022"),
  h5("Here you can see the monthly number of right-wing extremist crimes in the period from 2002 to the end of 2022.
    The data is based on brief parliamentary request (kleine Anfragen) submitted to the Government by the opposition left-wing party DIE LINKE"),
  plotlyOutput("plot_rs"))
```

## {.sidebar}

```{r}

selectInput("tat", label= "Select the Type of Offense",
            choices = c("Total"= "total",
                        "Violent"= "violent",
                        "Other"= "other"),
            selected = "Total")

sliderInput("time2", "Here you can define the time frame:",
            min(rs$date, na.rm = T), max(rs$date, na.rm = T),
            value = c(min(rs$date, na.rm = T), max(rs$date, na.rm = T)), 
            timeFormat = "%F")


checkboxGroupInput("BL", label = "Select a Federal State",
                   choices= list(
                       "Baden-Wuerttemberg",
                       "Bavaria",
                       "Berlin",
                       "Brandenburg",
                       "Bremen",
                       "Hamburg",
                       "Hesse",
                       "Mecklenburg-W.P.",
                       "Lower Saxony",
                       "North Rhine-Westphalia",
                       "Rhineland-Palatinate",
                       "Saarland",
                       "Saxony",
                       "Saxony-Anhalt",
                       "Schleswig-Holstein",
                       "Thuringia"
                   ),
                   selected = levels(rs$state))


```


```{r}
#| context: server

output$plot_rs <- renderPlotly({
  
  custom_colors <- c(
  "Baden-Wuerttemberg" = "deeppink", "Bavaria" = "forestgreen",
  "Berlin" = "gold", "Brandenburg" = "cornflowerblue",
  "Bremen" = "chocolate", "Hamburg" = "darkorchid4",
  "Hesse" = "cyan1", "Mecklenburg-W.P." = "gray0",
  "Lower Saxony" = "#bcf60c", "North Rhine-Westphalia" = "burlywood4",
  "Rhineland-Palatinate" = "darkcyan", "Saarland" = "plum1",
  "Saxony" = "blue4", "Saxony-Anhalt" = "#fffac9",
  "Schleswig-Holstein" = "firebrick1", "Thuringia" = "#aaffc9"
)

  
  r <- ggplot(subset(rs, state %in% input$BL), 
              aes(x = date, y = get(input$tat), color = state)) +
    geom_line() +
    geom_point(aes(text = paste("State: ", state, "<br>",
                                "Count: ", get(input$tat), "<br>",
                                "Date: ", date))) +
    scale_color_manual(values = custom_colors, drop =F) + 
    xlim(input$time2[1], input$time2[2])+
    xlab("Year")+
    ylab("Count of Crimes")+
    guides(color=guide_legend(title="Federal State:"))+
    theme_ipsum_rc()

  
    ggplotly(r, tooltip = "text") %>% 
      layout(dragmode = "select")



  })


```

# Right Wing Demonstrations

```{r}

mainPanel(
  leafletOutput("interactivePlot"),
  h3("Right-Wing Extremist Demonstrations by district 2005-2022"),
  h5(HTML("Here you can see the number of right-wing extremist demonstrations and the number of participants by district from 2005 to the end of 2022. 
  Data scource are answers to brief parliamentary request (kleine Anfragen) submitted to the Government by the opposition left-wing party DIE LINKE. <br> 
  <a href='https://data.gesis.org/sharing/#!Detail/10.7802/2256' target='_blank'> Source: Kanol, E.; Knoesel, J. (2021): Right-Wing Extremist Mobilization in Germany. Version 1.0.0. WZB Berlin Social Science Center. Dataset.</a>"))
)

```

## {.sidebar}

```{r}

sliderInput("selectedYear", "Here you can select individual years (L-R arrow keys for sliding):",
            min = min(rwm$year, na.rm = TRUE),
            max = max(rwm$year, na.rm = TRUE),
            value = min(rwm$year, na.rm = TRUE), 
            step = 1,
            sep = "",
            ticks = FALSE)

radioButtons("fillVariable", "Choose between the annually aggregated:",
                   choices = c("Number of demonstrations" = "demo_count",
                               "Number of participants" = "participants"))

```


```{r}
#| context: server


output$interactivePlot <- renderLeaflet({

    rwm1_filtered <- filter(rwm1, year == input$selectedYear)

    fill_variable <- if(input$fillVariable == "demo_count")  {
      "demo_count"
      } else {
        "participants"
        }

    # Determine the range of log-transformed values for coloring
    limits <- c(0, max(log10(rwm1[[fill_variable]]+1), na.rm = TRUE))

    color_pal <- colorNumeric(palette = viridis(256, option = "B"), domain = limits)


    # Create the Leaflet map
    leaflet(rwm1_filtered) %>%
      addTiles() %>%
      addProviderTiles(providers$CartoDB.Positron) %>%
      addPolygons(
        fillColor = ~color_pal(log10(rwm1_filtered[[fill_variable]])), # Log10 transfo for better scaling
        weight = 1,
        opacity = 1,
        color = "gray",
        dashArray = "2",
        fillOpacity = 0.7,
        smoothFactor = 0.5,
        label = ~sprintf("%s | Count: %s",
                     rwm1_filtered$kreis,
                     rwm1_filtered[[fill_variable]]-1),
        highlightOptions = highlightOptions(
          weight = 3,
          color = "#666",
          dashArray = "",
          fillOpacity = 0.7,
          bringToFront = TRUE
          )
        ) %>%
      setView(lng = 10.5, lat = 51.2, zoom = 6) %>%
      addLegend(
        pal = color_pal,
        values = ~log10(rwm1[[fill_variable]] +1),
        opacity = 0.7,
        title = "Count:",
        position = "bottomright",
        labFormat = labelFormat(transform = function(x) round(10^x)) # Manually adjust label format to show original scale
        )
  })



```





